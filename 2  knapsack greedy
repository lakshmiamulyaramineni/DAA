2  Write a program to find the optimal profit of a Knapsack using Greedy method

Algorithm

Algorithm
If the objects are already been sorted into non-increasing order of p[i] / w[i] then the
algorithm given below obtains solutions corresponding to this strategy. Algorithm GreedyKnapsack (m, n)
// P[1 : n] and w[1 : n] contain the profits and weights respectively of
// Objects ordered so that p[i] / w[i] > p[i + 1] / w[i + 1]. // m is the knapsack size and x[1: n] is the solution vector. {
for i := 1 to n do x[i] := 0.0 // initialize x U := m;
for i := 1 to n do
{
if (w(i) > U) then break;
x [i] := 1.0; U := U â€“ w[i];
}
if (i < n) then x[i] := U / w[i];
}

Program:

# include<stdio.h>
void knapsack(int n,float weight[],float profit[],float capacity)
{
float x[20],pr=0;
int i,j,u;
u=capacity;
for(i=0;i<n;i++)
x[i]=0.0;
for(i=0;i<n;i++)
{
if(weight[i]>u)
break;
else
{
x[i]=1.0;
pr=pr+profit[i];
u=u-weight[i];
}
}
if(i<n)
x[i]=u/weight[i];
pr=pr+(x[i]*profit[i]);
printf("\n Result array x is...");
for(i=0;i<n;i++)
printf("%f\t",x[i]);
printf("\n Profit is..... %f",pr);
}
void main()
{
float weight[20],profit[20],capacity;
int n,i,j;
float ratio[20],t;
printf("\n enter the capacityacity of knapsack...");
scanf("%f",&capacity);
printf("\n Toal no of objects...");
scanf("%d",&n);
printf("\n Enter the weights and profits of each object...");
for (i=0;i<n;i++)
{
scanf("%f %f",&weight[i],&profit[i]);
}
for (i=0;i<n;i++)
{
ratio[i]=profit[i]/weight[i];
}
for (i=0;i<n;i++)
{
for (j=i + 1;j<n;j++)
{
if (ratio[i]<ratio[j])
{
t=ratio[j];
ratio[j]=ratio[i];
ratio[i]=t;
t=weight[j];
weight[j]=weight[i];
weight[i]=t;
t=profit[j];
profit[j]=profit[i];
profit[i]=t;
}
}
}
knapsack(n,weight,profit,capacity);
}
Output:
enter the capacityacity of knapsack...20
Toal no of objects...3
Enter the weights and profits of each object...18
25
15 24
10 15
Result array x is...1.000000 0.500000 0.000000
Profit is..... 31.500000
